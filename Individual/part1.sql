/* Индивидуальная работа часть 1
   Литвак А.И. гр. 932020
   Вариант <5>    */

------------------------------------------
--ошибки
--3.1. Нет сортировки. + (добавила order by)
--3.2. По условию должны быть выведены названия поставщика и магазина. +
--4.1. Приставка «Интер»  добавляться более одного раза, при повторном запуске запроса. + (вставила условие)


create database supplies;

-- 1. Создание схемы БД.
-- Ограничения: атрибуты цена и количество не могут быть отрицательными; значение null допустимо только в поле адрес и телефон.
-- Для каждой таблицы должна быть возможна вставка картежа без указания первичного ключа.

-- !имя таблицы как в задании, да прямо по русски и с пробелами для этого есть спец.инструмент (см. использование '"' для posgresSQL и PL/SQL и '[' для T-SQL

--я делала в DataGrip, он позволяет использовать названия на русском без кавычек, поэтому могла где-то их пропустить

create sequence Поставщики_seq_id increment 1 start 1;

create sequence Товары_seq_id increment 1 start 1;

create sequence Магазины_seq_id increment 1 start 1;

create sequence Поставки_seq_id increment 1 start 1;

create table "Поставщики"
(
	"ID_Поставщика" int default nextval('Поставщики_seq_id':: regclass),
	"Название" text,
	"Адрес" text,
	"Телефон" text,
	constraint PK_Поставщики primary key ("ID_Поставщика"),
	constraint CH_Поставщики check ("Название" is not null and "ID_Поставщика" is not null)
);
alter sequence Поставщики_seq_id owned by "Поставщики"."ID_Поставщика";

create table "Товары"
(
	"ID_Товара" int default nextval('Товары_seq_id':: regclass),
	"Название" text,
	"Категория" text,
	"Производитель" text,
	constraint PK_Товары primary key ("ID_Товара"),
	constraint CH_Товары check ("Название" is not null and "Категория" is not null and "Производитель" is not null and "ID_Товара" is not null)
);
alter sequence Товары_seq_id owned by "Товары"."ID_Товара";

create table "Магазины"
(
	"ID_Магазина" int default nextval('Магазины_seq_id':: regclass),
	"Название" text,
	"ФИО_директора" text,
	"Адрес" text,
	"Телефон" text,
	constraint PK_Магазины primary key ("ID_Магазина"),
	constraint CH_Магазины check ("Название" is not null and "ФИО_директора" is not null and "ID_Магазина" is not null)
);
alter sequence Магазины_seq_id owned by "Магазины"."ID_Магазина";


create table "Поставки"
(
	"ID_Поставки" int  default nextval('Поставки_seq_id':: regclass),
	"ID_Поставщика" int,
	"ID_Товара" int,
	"ID_Магазина" int,
	"Дата_поставки" timestamp,
	"Цена" decimal,
	"Количество" int,
	constraint PK_Поставки primary key ("ID_Поставки"),
	constraint FK_Поставки_Поставщики foreign key ("ID_Поставщика") references "Поставщики" ("ID_Поставщика"),
	constraint FK_Поставки_Товары foreign key ("ID_Товара") references "Товары" ("ID_Товара"),
	constraint FK_Поставки_Магазины foreign key ("ID_Магазина") references "Магазины" ("ID_Магазина"),
	constraint CH_Поставки check ("Дата_поставки" is not null and "Цена" is not null and "Количество" is not null
	                                  and "Цена" >= 0 and "Количество" >= 0)
);
alter sequence Поставки_seq_id owned by "Поставки"."ID_Поставки";




------------------------------------------
-- 2. Заполнить созданные таблицы данными, 5-10 записей для каждой таблицы.

--<тут запросы на вставку>

INSERT INTO "Поставщики" ("Название", "Адрес", "Телефон") VALUES ('Вкуснотеево','г. Томск, ул. Нахимова 6', '+7 903 915 13 43');
INSERT INTO "Поставщики" ("Название", "Адрес", "Телефон") VALUES ('Макарена','г. Томск, пер. Инструментальный 41', '+7 913 886 77 53');
INSERT INTO "Поставщики" ("Название", "Адрес", "Телефон") VALUES ('ВеземВсем','г. Москва, ул. Красноармейская 119', '+7 923 801 00 25');
INSERT INTO "Поставщики" ("Название", "Адрес", "Телефон") VALUES ('ГудГудс','г. Новосибирск, ул. Никитина 23', '+7 903 975 31 34');
INSERT INTO "Поставщики" ("Название", "Адрес", "Телефон") VALUES ('PROКисло','г. Томск, ул. Ленина 30', '+7 913 809 19 77');
INSERT INTO "Поставщики" ("Название", "Адрес", "Телефон") VALUES ('ООО Интер','г. Москва, ул. Советская 15', '+7 905 970 15 51');

INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Кефир','Молочная продукция', 'Простоквашино');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Творог','Молочная продукция', 'Простоквашино');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Макароны','Бакалея', 'Barilla');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Coca-Cola','Напитки', 'The Coca-Cola company');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Sprite','Напитки', 'The Coca-Cola company');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Эмаль для дерева белая','Эмали', 'ИП рога и копыта');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Эмаль для дерева черная','Эмали', 'ИП рога и копыта');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Лак для дерева белый','Лаки', 'ИП рога и копыта');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Лак для дерева черный','Лаки', 'ИП копыта и рога');
INSERT INTO "Товары"("Название", "Категория", "Производитель") VALUES ('Молоко','Молочная продукция', 'Простоквашино');

INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Лента','Иванов Степан Владимирович', 'г. Томск, ул. Кирова 15', '+7 911 820 23 22');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Ярче','Фомин Валерий Валерьевич', 'г. Москва, ул. Вершинина 22', '+7 911 156 23 12');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Спар','Александрова Елена Сергеевна', 'г. Москва, ул. Мира 34', '+7 905 546 89 54');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Мария-Ра','Русланова Екатерина Игоревна', 'г. Новосибирск, ул. Гоголя 56', '+7 912 467 88 88');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Абрикос','Макаров Алексей Алексеевич', 'г. Томск, ул. Сибирская 48', '+7 903 952 00 11');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Космос','Селиванова Надежда Алексеевна', 'г. Бийск, ул. Пионерская 11', '+7 941 685 85 13');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Мир','Поздов Афанасий Савванович', 'г. Хабароск, ул. Южная 48', '+7 903 952 12 58');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Корзинка','Жабкина Оксана Ефремовна', 'г. Бердск, ул. Речная 121', '+7 912 902 24 90');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Магнит','Янова Инна Александровна', 'г. Оренбург, ул. Первая 18', '+7 913 956 35 10');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Пятерочка','Курганова Василиса Александровна', 'г. Северск, ул. Солнечная 53', '+7 908 983 49 00');
INSERT INTO "Магазины"("Название", "ФИО_директора", "Адрес", "Телефон") VALUES ('Метро','Ивакина Алла Валерьевна', 'г. Нижний Новгород, ул. Елизаровых 38', '+7 935 967 23 13');

INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (1, 4, 1, TO_DATE('2022-11-01', 'YYYY-MM-DD'), 56,100 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (1, 5, 1, TO_DATE('2019-11-01', 'YYYY-MM-DD'), 58,100 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (5, 2, 4, TO_DATE('2021-08-13 ', 'YYYY-MM-DD'), 152,10 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (5, 1, 4, TO_DATE('2020-07-23 ', 'YYYY-MM-DD'), 80,20 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (2, 3, 2, TO_DATE('2022-04-13 ', 'YYYY-MM-DD'), 80,27 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (6, 6, 5, TO_DATE('2021-12-15 ', 'YYYY-MM-DD'), 240,25 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (6, 9, 5, TO_DATE('2022-01-05 ', 'YYYY-MM-DD'), 210,15 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 1, TO_DATE('2022-08-05 ', 'YYYY-MM-DD'), 210,15 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 2, TO_DATE('2022-09-05 ', 'YYYY-MM-DD'), 205,20 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 3, TO_DATE('2022-10-05 ', 'YYYY-MM-DD'), 208,18 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 4, TO_DATE('2022-09-05 ', 'YYYY-MM-DD'), 223,10 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 5, TO_DATE('2022-09-05 ', 'YYYY-MM-DD'), 200,25 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 6, TO_DATE('2022-08-05 ', 'YYYY-MM-DD'), 253,8 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 7, TO_DATE('2022-07-05 ', 'YYYY-MM-DD'), 268,5 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 8, TO_DATE('2022-07-05 ', 'YYYY-MM-DD'), 208,90 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 9, TO_DATE('2022-08-05 ', 'YYYY-MM-DD'), 219,17 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 10, TO_DATE('2022-09-05 ', 'YYYY-MM-DD'), 267,6 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (3, 7, 10, TO_DATE('2022-09-06 ', 'YYYY-MM-DD'), 254,8 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (5, 10, 4, TO_DATE('2020-10-01', 'YYYY-MM-DD'), 56,5 );
INSERT INTO "Поставки"("ID_Поставщика", "ID_Товара", "ID_Магазина", "Дата_поставки", "Цена", "Количество") VALUES (5, 10, 4, TO_DATE('2019-10-01', 'YYYY-MM-DD'), 53,5 );


------------------------------------------
-- 3. Написать запросы. Устранить дублирование только для тех случаев, где это потенциально возможно.

-- 3.1. Вывести товары из категорий “эмали” и “лаки” от производителя “ИП рога и копыта”, которые были поставлены не менее чем в 10 разных магазинов за последние полгода.
-- Результат упорядочить по наименованию. В выборке должны присутствовать только следующие атрибуты: название товара, количество поставок

--3.1. Нет сортировки. (исправила)

--<тут запрос>

select "Название", count("ID_Магазина") -- количество поставок с повторениями
from "Товары"
inner join "Поставки" on "Товары"."ID_Товара" = "Поставки"."ID_Товара"
where (lower("Категория") = 'эмали' or  lower("Категория") = 'лаки') and lower("Производитель") = 'ип рога и копыта'
  and  "Поставки"."Дата_поставки" > (current_timestamp - interval '6 month')
group by "Название"
having count(distinct "ID_Магазина") >= 10 -- в разные магазины, поэтому distinct
order by "Название"
;


-- 3.2. Выбрать поставщиков работавших с каким-либо магазином больше 2-х лет (время работы – разница между временем первой и последней поставки).
-- В выборке должны присутствовать только следующие атрибуты: Название поставщика, название магазина, длительность сотрудничества.

--По условию должны быть выведены названия поставщика и магазина.(исправила)

--<тут запрос>

select "П"."Название","М"."Название", max("Дата_поставки") - min("Дата_поставки") as "длительность_сотрудничества"
from "Поставки"
inner join "Магазины" "М" on "М"."ID_Магазина" = "Поставки"."ID_Магазина"
inner join "Поставщики" "П" on "П"."ID_Поставщика" = "Поставки"."ID_Поставщика"
group by "П"."Название", "М"."Название"
having max("Дата_поставки") - min("Дата_поставки") >  interval '2 years'
;

-- 3.3.  Для каждого магазина сформировать годичную статистику суммарной стоимости поставок.
-- В выборке должны присутствовать только следующие атрибуты:
-- Название магазина, год, общая стоимость поставок, количество задействованных поставщиков, средняя цена поставки.

--<тут запрос>

select "М"."Название", sum("Количество"*"Цена") as "общая_стоимость_поставок",
       extract(year from "Дата_поставки") as "год", count(distinct "ID_Поставщика") as "количество_поставщиков",
       sum("Количество" * "Цена") / count("ID_Поставки") as "средняя_цена_поставки"
from "Поставки"
inner join "Магазины" "М" on "М"."ID_Магазина" = "Поставки"."ID_Магазина"
group by "М"."Название",extract(year from "Дата_поставки")
;


-- 3.4. Для каждого поставщика найти общее число поставок, среднюю стоимость одной поставки, число магазинов, с которыми он работает,
-- насколько самая дорогая поставка превышает среднюю стоимость (отличие считать в процентах).
-- Исключить из выборки поставщиков работающих только с одним магазином

--<тут запрос>

select "Поставщики"."Название", count("ID_Поставки") as "общее_число_поставок",
       round(sum("Количество" * "Цена") / count("ID_Поставки"),2) as "средняя_стоимость_одной_доставки",
       count(distinct "ID_Магазина") as "число_магазинов_для_поставки", --max(Количество * Цена) -- маскимум
       round((max("Количество" * "Цена") - (sum("Количество" * "Цена") / count("ID_Поставки"))) / (sum("Количество" * "Цена") / count("ID_Поставки")) * 100,2) --(максимум - среднее)/максимум
from "Поставщики"
inner join "Поставки" on "Поставщики"."ID_Поставщика" = "Поставки"."ID_Поставщика"
group by "Поставщики"."Название"
having count(distinct "ID_Магазина") > 1
;

-- 3.5. Найти все номера поставок молока, цены единицы товаров в которых больше средней.
-- В выборке должны присутствовать только следующие атрибуты: Номер поставки, название поставщика, цена за единицы, средняя цена молока.

--<тут запрос>

with temp as
	(
        select "ID_Поставки", "Цена", "П"."Название" as comp_name
        from "Поставки"
		inner join "Товары" on "Товары"."ID_Товара" = "Поставки"."ID_Товара"
        inner join "Поставщики" "П" on "П"."ID_Поставщика" = "Поставки"."ID_Поставщика"
        where lower("Товары"."Название") = 'молоко'
        group by "ID_Поставки", "П"."Название"),
    for_average as
	(
		select avg("Цена") as avg_price
		from temp
	)
select "ID_Поставки", comp_name as "Название_Поставщика", "Цена" as "Цена_за_единицы", avg_price as "средняя_цена_молока"
from temp, for_average
where "Цена" > avg_price;

-- 3.6. Выбрать поставщиков, работающих с одни и менее магазинами.
-- В выборке должны присутствовать только следующие атрибуты: Название магазина, название поставщика, количество поставок.

--<тут запрос>

with temp as
	(
		select "ID_Поставщика", count("Поставки"."ID_Магазина") as "Количество_поставок"
		from "Поставки"
		group by "ID_Поставщика"
		having count(distinct "Поставки"."ID_Магазина") <= 1
	)
select distinct "Поставщики"."Название", "Количество_поставок","М"."Название"
from temp
inner join "Поставщики" on temp."ID_Поставщика" = "Поставщики"."ID_Поставщика"
inner join "Поставки" "П" on "Поставщики"."ID_Поставщика" = "П"."ID_Поставщика"
inner join "Магазины" "М" on "М"."ID_Магазина" = "П"."ID_Магазина"
;

------------------------------------------
-- 4. Написать запросы на изменение данных.
-- 4.1. Изменить названия тех магазинов, которые находятся в Томске, и в которые поставлялся товар от поставщика «ООО Интер».
-- В название добавить слово «Интер». Например, «Космос» -> «Космос - Интер». Приставка «Интер» не должна добавляться более одного раза.

--Приставка «Интер»  добавляться более одного раза, при повторном запуске запроса.(исправила)

--<запрос на данные для изменния>

select "Магазины"."ID_Магазина", "Магазины"."Название", "Магазины"."Адрес" as "Адрес_Магазина", "П"."Название" as "Название_Поставщика"
from "Поставки"
inner join "Поставщики" "П" on "П"."ID_Поставщика" = "Поставки"."ID_Поставщика"
inner join "Магазины" on "Магазины"."ID_Магазина" = "Поставки"."ID_Магазина"
where  "Магазины"."ID_Магазина" = "Поставки"."ID_Магазина" and lower("Магазины"."Адрес") like '%томск%'
    and lower("П"."Название") = 'ооо интер' and lower("П"."Название") not like '%интер%'
;


--<запрос>

update "Магазины"
set "Название" = concat("Магазины"."Название", ' - Интер')
from "Поставки"
inner join "Поставщики" "П" on "П"."ID_Поставщика" = "Поставки"."ID_Поставщика"
where  "Магазины"."ID_Магазина" = "Поставки"."ID_Магазина" and lower("Магазины"."Адрес") like '%томск%'
    and lower("П"."Название") = 'ооо интер' and lower("П"."Название") not like '%интер%'
;

--<запрос на данные после изменнеия>

select "Магазины"."ID_Магазина", "Магазины"."Название", "Магазины"."Адрес" as "Адрес_Магазина", "П"."Название" as "Название_Поставщика"
from "Поставки"
inner join "Поставщики" "П" on "П"."ID_Поставщика" = "Поставки"."ID_Поставщика"
inner join "Магазины" on "Магазины"."ID_Магазина" = "Поставки"."ID_Магазина"
where  "Магазины"."ID_Магазина" = "Поставки"."ID_Магазина" and lower("Магазины"."Адрес") like '%томск%'
    and lower("П"."Название") = 'ооо интер' and lower("П"."Название") not like '%интер%'
;


-- 4.2. Удалить из базы товары, магазины и поставщиков, не участвовавших в поставках.

<запрос на данные для изменния>
select *
from "Товары"
where "Товары"."ID_Товара" not in
      (select "Поставки"."ID_Товара"
       from "Поставки")
--(8 id)

select *
from "Поставщики"
where "Поставщики"."ID_Поставщика" not in
      (select "Поставки"."ID_Поставщика"
       from "Поставки");
--(4 id)

select *
from "Магазины"
where "Магазины"."ID_Магазина" not in
      (select "Магазины"."ID_Магазина"
       from "Поставки");
--(11 id)


--<запрос>

delete from "Товары"
where "Товары"."ID_Товара" not in
      (select "Поставки"."ID_Товара"
       from "Поставки"); -- удалил 8 id

delete from "Поставщики"
where "Поставщики"."ID_Поставщика" not in
      (select "Поставки"."ID_Поставщика"
       from "Поставки"); -- удалил 4 Id

delete from "Магазины"
where "Магазины"."ID_Магазина" not in
      (select "Поставки"."ID_Магазина"
       from "Поставки");--удалил 11 id

--<запрос на данные после изменнеия>
select *
from "Товары"
where "Товары"."ID_Товара" not in
      (select "Поставки"."ID_Товара"
       from "Поставки")

select *
from "Поставщики"
where "Поставщики"."ID_Поставщика" not in
      (select "Поставки"."ID_Поставщика"
       from "Поставки");

select *
from "Магазины"
where "Магазины"."ID_Магазина" not in
      (select "Магазины"."ID_Магазина"
       from "Поставки");
--в каждом вернул 0 строк


--4.3. Вынести категории товаров в отдельный справочник.


create sequence Категории_seq_id increment 1 start 1;

create table "Категории"
(
	"ID_Категории" int default nextval('Категории_seq_id':: regclass),
	"Название" varchar unique,
    constraint PK_Категории primary key ("ID_Категории"),
	constraint CH_Категории check ("Категории"."Название" is not null and "ID_Категории" is not null)
);

alter sequence Категории_seq_id owned by "Категории"."ID_Категории";

insert into "Категории" ("Название")
select distinct "Категория"
from "Товары"
;

alter table "Товары"
add	"ID_Категории" int,
add constraint FK_Товары_ID_Категории
foreign key ("ID_Категории") references "Категории" ("ID_Категории")
;

update "Товары"
set "ID_Категории" =
	(
		select "Категории"."ID_Категории"
		from "Категории"
		where "Категории"."Название" = "Товары"."Категория"
	);

alter table "Товары"
drop column "Категория";


------------------------------------------
-- 5. Создать представления.
-- 5.1. Оформить запросы 3.5 - 3.6 в виде представления.

--<тут запрос на создание первого представления>

create view comp_milk as
	(
        select "ID_Поставки", "Цена", "П"."Название" as comp_name
        from "Поставки"
		inner join "Товары" on "Товары"."ID_Товара" = "Поставки"."ID_Товара"
        inner join "Поставщики" "П" on "П"."ID_Поставщика" = "Поставки"."ID_Поставщика"
        where lower("Товары"."Название") = 'молоко'
        group by "ID_Поставки", "П"."Название");
create view for_average as
	(
		select avg("Цена") as avg_price
		from comp_milk
	);

--<пример работы запроса с предсталением>

select "ID_Поставки", comp_name as "Название_Поставщика", "Цена" as "Цена_за_единицы", avg_price as "средняя_цена_молока"
from comp_milk, for_average
where "Цена" > avg_price;

--<тут запрос на создание второго представления>

create view sup_lower1 as
	(
		select "ID_Поставщика", count("Поставки"."ID_Магазина") as "Количество_поставок"
		from "Поставки"
		group by "ID_Поставщика"
		having count(distinct "Поставки"."ID_Магазина") <= 1
	);

--<пример работы запроса с предсталением>

select distinct "Поставщики"."Название", "Количество_поставок","М"."Название"
from sup_lower1
inner join "Поставщики" on sup_lower1."ID_Поставщика" = "Поставщики"."ID_Поставщика"
inner join "Поставки" "П" on "Поставщики"."ID_Поставщика" = "П"."ID_Поставщика"
inner join "Магазины" "М" on "М"."ID_Магазина" = "П"."ID_Магазина";

-- 5.2. Создать представление со следующими атрибутами: ID_магазина, название, ФИО директора, адрес, количеств поставщиков, дата последней поставки.
-- В выборку включит только магазины, получавшие, когда-либо кефир.

--<тут запрос на создание представления>

create view stores_kefir as
select "Магазины"."ID_Магазина", "Магазины"."Название", "ФИО_директора", "Адрес",
       count(distinct "ID_Поставщика") as "Количество_Поставщиков", max("Дата_поставки") as "Последняя_поставка"
from "Поставки"
inner join "Магазины" on "Магазины"."ID_Магазина" = "Поставки"."ID_Магазина"
inner join "Товары" "Т" on "Т"."ID_Товара" = "Поставки"."ID_Товара"
where lower("Т"."Название") = 'кефир'
group by "Магазины"."ID_Магазина", "Магазины"."Название", "ФИО_директора", "Адрес";


--<пример работы запроса с предсталением>

select *
from stores_kefir
;

-- 5.3. Текст задания (Нет такого номера в файле)
<тут запрос на создание представления>

<пример работы запроса с предсталением>


------------------------------------------
--<тут запросы на удаление всех таблиц, представлений, процедур и функций>

drop view if exists stores_kefir cascade;
drop view if exists sup_lower1 cascade;
drop view if exists comp_milk cascade;
drop view if exists for_average;


drop table if exists "Категории" cascade;
drop table if exists "Магазины" cascade;
drop table if exists "Поставки" cascade;
drop table if exists "Поставщики" cascade;
drop table if exists "Товары" cascade;